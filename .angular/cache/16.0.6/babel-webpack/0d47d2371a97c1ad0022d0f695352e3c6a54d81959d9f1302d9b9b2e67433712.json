{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass CategoryComponent {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.products = []; // Array to store fetched products\n    this.categoryId = null; // Variable to store the category ID\n  }\n\n  ngOnInit() {\n    // Get the category ID from the URL\n    this.categoryId = this.route.snapshot.paramMap.get('id')?.toNumber() ?? null;\n    // Check if a valid category ID is available\n    if (this.categoryId !== null) {\n      // Replace 'your-api-endpoint' with the actual URL of your Symfony API\n      const apiUrl = `http://127.0.0.1:8000/category/${this.categoryId}`;\n      // Make an HTTP GET request to fetch products by category\n      this.http.get(apiUrl).subscribe(data => {\n        this.products = data; // Assuming your API returns an array of products\n      });\n    }\n  }\n}\n_class = CategoryComponent;\n_class.ɵfac = function CategoryComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"pm-category\"]],\n  decls: 2,\n  vars: 0,\n  template: function CategoryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"category works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { CategoryComponent };","map":{"version":3,"names":["CategoryComponent","constructor","http","route","products","categoryId","ngOnInit","snapshot","paramMap","get","toNumber","apiUrl","subscribe","data","i0","ɵɵdirectiveInject","i1","HttpClient","i2","ActivatedRoute","selectors","decls","vars","template","CategoryComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\category\\category.component.ts","C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\category\\category.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router'; // Import ActivatedRoute to get the category ID from the URL\n\n@Component({\n  selector: 'pm-category',\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.css']\n})\nexport class CategoryComponent implements OnInit {\n  products: any[] = []; // Array to store fetched products\n  categoryId: number | null = null; // Variable to store the category ID\n\n  constructor(private http: HttpClient, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    // Get the category ID from the URL\n    this.categoryId = this.route.snapshot.paramMap.get('id')?.toNumber() ?? null;\n\n    // Check if a valid category ID is available\n    if (this.categoryId !== null) {\n      // Replace 'your-api-endpoint' with the actual URL of your Symfony API\n      const apiUrl = `http://127.0.0.1:8000/category/${this.categoryId}`;\n\n      // Make an HTTP GET request to fetch products by category\n      this.http.get(apiUrl).subscribe((data: any) => {\n        this.products = data; // Assuming your API returns an array of products\n      });\n    }\n  }\n}\n","<p>category works!</p>\n"],"mappings":";;;;AAIA,MAKaA,iBAAiB;EAI5BC,YAAoBC,IAAgB,EAAUC,KAAqB;IAA/C,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,KAAK,GAALA,KAAK;IAHnD,KAAAC,QAAQ,GAAU,EAAE,CAAC,CAAC;IACtB,KAAAC,UAAU,GAAkB,IAAI,CAAC,CAAC;EAEoC;;EAEtEC,QAAQA,CAAA;IACN;IACA,IAAI,CAACD,UAAU,GAAG,IAAI,CAACF,KAAK,CAACI,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,EAAEC,QAAQ,EAAE,IAAI,IAAI;IAE5E;IACA,IAAI,IAAI,CAACL,UAAU,KAAK,IAAI,EAAE;MAC5B;MACA,MAAMM,MAAM,GAAG,kCAAkC,IAAI,CAACN,UAAU,EAAE;MAElE;MACA,IAAI,CAACH,IAAI,CAACO,GAAG,CAACE,MAAM,CAAC,CAACC,SAAS,CAAEC,IAAS,IAAI;QAC5C,IAAI,CAACT,QAAQ,GAAGS,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC;;EAEN;;SApBWb,iBAAiB;;mBAAjBA,MAAiB,EAAAc,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;;QAAjBnB,MAAiB;EAAAoB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCT9BX,EAAA,CAAAa,cAAA,QAAG;MAAAb,EAAA,CAAAc,MAAA,sBAAe;MAAAd,EAAA,CAAAe,YAAA,EAAI;;;;;SDST7B,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}