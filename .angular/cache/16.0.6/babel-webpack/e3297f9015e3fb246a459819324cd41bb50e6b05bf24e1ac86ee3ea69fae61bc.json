{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { Jwt\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n\r\nexport class AuthService {\r\n\r\n  private isAuthenticated = false;\r\n  authState = { isAuthenticated: false };\r\n\r\n  private token: string | null = null;\r\n\r\n  setToken(token: string): void {\r\n    this.token = token;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.token;\r\n  }\r\n\r\n  // Simulate user login\r\n  login() {\r\n    this.authState.isAuthenticated = true;\r\n    //console.log(this.authState.isAuthenticated)\r\n  }\r\n\r\n  // Simulate user logout\r\n  logout() {\r\n    this.authState.isAuthenticated = false;\r\n    this.token = null;\r\n  }\r\n\r\n    // Check if the user is authenticated by verifying the JWT token\r\n    isAuthenticatedUser(): boolean {\r\n      const token = this.getToken();\r\n  \r\n      if (token) {\r\n        try {\r\n          const decodedToken: JwtPayload = jwt_decode(token);\r\n          const expirationDate = new Date(decodedToken.exp * 1000); // Convert to milliseconds\r\n          const currentDate = new Date();\r\n    \r\n          // Check if the token is expired\r\n          if (currentDate <= expirationDate) {\r\n            return true;\r\n          }\r\n        } catch (error) {\r\n          // Token is invalid or expired\r\n        }\r\n      }\r\n        return false;\r\n      }\r\n    \r\n  \r\n  // Check if the user is authenticated\r\n  /* isAuthenticatedUser(): boolean {\r\n    return this.authState.isAuthenticated && !!this.token;\r\n  } */\r\n}\r\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}