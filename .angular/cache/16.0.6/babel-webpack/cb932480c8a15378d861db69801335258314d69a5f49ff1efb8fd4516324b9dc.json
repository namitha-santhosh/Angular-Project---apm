{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"@angular/common/http\";\nclass AdminComponent {\n  constructor(authService, router, sanitizer, http // Inject HttpClient\n  ) {\n    this.authService = authService;\n    this.router = router;\n    this.sanitizer = sanitizer;\n    this.http = http;\n  }\n  ngOnInit() {\n    const token = this.authService.getToken();\n    const adminUrl = 'http://127.0.0.1:8000/admin'; // Replace with your EasyAdminBundle URL\n    // Set the JWT token in the Authorization header\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    // Make the HTTP request with headers\n    this.http.get(adminUrl, {\n      headers\n    }).subscribe(response => {\n      //this.iframeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`${adminUrl}`);\n    }, error => {\n      console.error('Error fetching admin data', error);\n      if (error.status === 401) {\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n}\n_class = AdminComponent;\n_class.ɵfac = function AdminComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.DomSanitizer), i0.ɵɵdirectiveInject(i4.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"pm-admin\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[\"width\", \"100%\", \"height\", \"600\", 3, \"src\"]],\n  template: function AdminComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"iframe\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"src\", ctx.iframeUrl, i0.ɵɵsanitizeResourceUrl);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AdminComponent };","map":{"version":3,"names":["HttpHeaders","AdminComponent","constructor","authService","router","sanitizer","http","ngOnInit","token","getToken","adminUrl","headers","set","get","subscribe","response","error","console","status","navigate","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","i3","DomSanitizer","i4","HttpClient","selectors","decls","vars","consts","template","AdminComponent_Template","rf","ctx","ɵɵelement","ɵɵproperty","iframeUrl","ɵɵsanitizeResourceUrl"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\admin\\admin.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'; \n\n@Component({\n  selector: 'pm-admin',\n  template: `\n    <iframe [src]=\"iframeUrl\" width=\"100%\" height=\"600\"></iframe>\n  `,\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n  iframeUrl: SafeResourceUrl | undefined;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private sanitizer: DomSanitizer,\n    private http: HttpClient // Inject HttpClient\n  ) {}\n\n  ngOnInit(): void {\n    const token = this.authService.getToken();\n    const adminUrl = 'http://127.0.0.1:8000/admin'; // Replace with your EasyAdminBundle URL\n\n    // Set the JWT token in the Authorization header\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n    // Make the HTTP request with headers\n    this.http.get(adminUrl, { headers }).subscribe(\n      (response: any) => {\n        //this.iframeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(`${adminUrl}`);\n      },\n      (error) => {\n        console.error('Error fetching admin data', error);\n        if (error.status === 401) {\n          this.router.navigate(['/login']);\n        }\n      }\n    );\n  }\n}\n"],"mappings":";AAIA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;;;AAE9D,MAOaC,cAAc;EAGzBC,YACUC,WAAwB,EACxBC,MAAc,EACdC,SAAuB,EACvBC,IAAgB,CAAC;EAAA,E;IAHjB,KAAAH,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,SAAS,GAATA,SAAS;IACT,KAAAC,IAAI,GAAJA,IAAI;EACX;EAEHC,QAAQA,CAAA;IACN,MAAMC,KAAK,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IACzC,MAAMC,QAAQ,GAAG,6BAA6B,CAAC,CAAC;IAEhD;IACA,MAAMC,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IAEzE;IACA,IAAI,CAACF,IAAI,CAACO,GAAG,CAACH,QAAQ,EAAE;MAAEC;IAAO,CAAE,CAAC,CAACG,SAAS,CAC3CC,QAAa,IAAI;MAChB;IAAA,CACD,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,IAAIA,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAEpC,CAAC,CACF;EACH;;SA7BWlB,cAAc;;mBAAdA,MAAc,EAAAmB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,YAAA,GAAAP,EAAA,CAAAC,iBAAA,CAAAO,EAAA,CAAAC,UAAA;AAAA;;QAAd5B,MAAc;EAAA6B,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAJvBhB,EAAA,CAAAkB,SAAA,gBAA6D;;;MAArDlB,EAAA,CAAAmB,UAAA,QAAAF,GAAA,CAAAG,SAAA,EAAApB,EAAA,CAAAqB,qBAAA,CAAiB;;;;;SAIhBxC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}