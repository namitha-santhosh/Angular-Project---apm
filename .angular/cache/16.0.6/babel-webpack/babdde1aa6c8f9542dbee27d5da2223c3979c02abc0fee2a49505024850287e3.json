{"ast":null,"code":"var _class;\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nclass AuthService {\n  constructor() {\n    this.isAuthenticated = false;\n    this.authState = {\n      isAuthenticated: false\n    };\n    this.token = null;\n  }\n  setToken(token) {\n    this.token = token;\n  }\n  getToken() {\n    return this.token;\n  }\n  // Simulate user login\n  login() {\n    this.authState.isAuthenticated = true;\n    //console.log(this.authState.isAuthenticated)\n  }\n  // Simulate user logout\n  logout() {\n    this.authState.isAuthenticated = false;\n    this.token = null;\n  }\n  // Check if the user is authenticated by verifying the JWT token\n  isAuthenticatedUser() {\n    const token = this.getToken();\n    if (token) {\n      try {\n        const decodedToken = jwt_decode(token);\n        const expirationDate = new Date(decodedToken.exp * 1000); // Convert to milliseconds\n        const currentDate = new Date();\n        // Check if the token is expired\n        if (currentDate <= expirationDate) {\n          return true;\n        }\n      } catch (error) {\n        // Token is invalid or expired\n      }\n    }\n    // Check if the user is authenticated\n    /* isAuthenticatedUser(): boolean {\n      return this.authState.isAuthenticated && !!this.token;\n    } */\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["jwt_decode","AuthService","constructor","isAuthenticated","authState","token","setToken","getToken","login","logout","isAuthenticatedUser","decodedToken","expirationDate","Date","exp","currentDate","error","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { JwtPayload } from './jwt-payload.interface';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n\r\nexport class AuthService {\r\n\r\n  private isAuthenticated = false;\r\n  authState = { isAuthenticated: false };\r\n\r\n  private token: string | null = null;\r\n\r\n  setToken(token: string): void {\r\n    this.token = token;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.token;\r\n  }\r\n\r\n  // Simulate user login\r\n  login() {\r\n    this.authState.isAuthenticated = true;\r\n    //console.log(this.authState.isAuthenticated)\r\n  }\r\n\r\n  // Simulate user logout\r\n  logout() {\r\n    this.authState.isAuthenticated = false;\r\n    this.token = null;\r\n  }\r\n\r\n    // Check if the user is authenticated by verifying the JWT token\r\n    isAuthenticatedUser(): boolean {\r\n      const token = this.getToken();\r\n  \r\n      if (token) {\r\n        try {\r\n          const decodedToken: JwtPayload = jwt_decode(token);\r\n          const expirationDate = new Date(decodedToken.exp * 1000); // Convert to milliseconds\r\n          const currentDate = new Date();\r\n    \r\n          // Check if the token is expired\r\n          if (currentDate <= expirationDate) {\r\n            return true;\r\n          }\r\n        } catch (error) {\r\n          // Token is invalid or expired\r\n        }\r\n      }\r\n    \r\n  \r\n  // Check if the user is authenticated\r\n  /* isAuthenticatedUser(): boolean {\r\n    return this.authState.isAuthenticated && !!this.token;\r\n  } */\r\n}\r\n"],"mappings":";AACA,OAAOA,UAAU,MAAM,YAAY;;AAInC,MAIaC,WAAW;EAJxBC,YAAA;IAMU,KAAAC,eAAe,GAAG,KAAK;IAC/B,KAAAC,SAAS,GAAG;MAAED,eAAe,EAAE;IAAK,CAAE;IAE9B,KAAAE,KAAK,GAAkB,IAAI;;EAEnCC,QAAQA,CAACD,KAAa;IACpB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,KAAK;EACnB;EAEA;EACAG,KAAKA,CAAA;IACH,IAAI,CAACJ,SAAS,CAACD,eAAe,GAAG,IAAI;IACrC;EACF;EAEA;EACAM,MAAMA,CAAA;IACJ,IAAI,CAACL,SAAS,CAACD,eAAe,GAAG,KAAK;IACtC,IAAI,CAACE,KAAK,GAAG,IAAI;EACnB;EAEE;EACAK,mBAAmBA,CAAA;IACjB,MAAML,KAAK,GAAG,IAAI,CAACE,QAAQ,EAAE;IAE7B,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMM,YAAY,GAAeX,UAAU,CAACK,KAAK,CAAC;QAClD,MAAMO,cAAc,GAAG,IAAIC,IAAI,CAACF,YAAY,CAACG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;QAC1D,MAAMC,WAAW,GAAG,IAAIF,IAAI,EAAE;QAE9B;QACA,IAAIE,WAAW,IAAIH,cAAc,EAAE;UACjC,OAAO,IAAI;;OAEd,CAAC,OAAOI,KAAK,EAAE;QACd;MAAA;;IAKR;IACA;;;EAGF;;SAnDaf,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAgB,OAAA,EAAXhB,MAAW,CAAAiB,IAAA;EAAAC,UAAA,EAHV;AAAM;SAGPlB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}