{"ast":null,"code":"var _class;\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass AuthService {\n  constructor() {\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n  }\n  //private isAuthenticated = false;\n  //authState = { isAuthenticated: false };\n  // Simulate user login\n  login() {\n    //this.authState.isAuthenticated = true;\n    this.isAuthenticatedSubject.next(true);\n    //console.log(this.authState.isAuthenticated)\n  }\n  // Simulate user logout\n  logout() {\n    //this.authState.isAuthenticated = false;\n    this.isAuthenticatedSubject.next(false);\n  }\n  // Check if the user is authenticated\n  isAuthenticatedUser() {\n    return this.authState.isAuthenticated;\n    return this.isAuthenticatedSubject.value;\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","isAuthenticatedSubject","isAuthenticated$","asObservable","login","next","logout","isAuthenticatedUser","authState","isAuthenticated","value","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n\r\nexport class AuthService {\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  //private isAuthenticated = false;\r\n  //authState = { isAuthenticated: false };\r\n\r\n  // Simulate user login\r\n  login() {\r\n    //this.authState.isAuthenticated = true;\r\n    this.isAuthenticatedSubject.next(true);\r\n    //console.log(this.authState.isAuthenticated)\r\n  }\r\n\r\n  // Simulate user logout\r\n  logout() {\r\n    //this.authState.isAuthenticated = false;\r\n    this.isAuthenticatedSubject.next(false);\r\n  }\r\n  \r\n  // Check if the user is authenticated\r\n  isAuthenticatedUser(): boolean {\r\n    return this.authState.isAuthenticated;\r\n    return this.isAuthenticatedSubject.value;\r\n  }\r\n}\r\n"],"mappings":";AACA,SAASA,eAAe,QAAQ,MAAM;;AAEtC,MAIaC,WAAW;EAJxBC,YAAA;IAKU,KAAAC,sBAAsB,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IACpE,KAAAI,gBAAgB,GAAG,IAAI,CAACD,sBAAsB,CAACE,YAAY,EAAE;;EAE7D;EACA;EAEA;EACAC,KAAKA,CAAA;IACH;IACA,IAAI,CAACH,sBAAsB,CAACI,IAAI,CAAC,IAAI,CAAC;IACtC;EACF;EAEA;EACAC,MAAMA,CAAA;IACJ;IACA,IAAI,CAACL,sBAAsB,CAACI,IAAI,CAAC,KAAK,CAAC;EACzC;EAEA;EACAE,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACC,SAAS,CAACC,eAAe;IACrC,OAAO,IAAI,CAACR,sBAAsB,CAACS,KAAK;EAC1C;;SAxBWX,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAY,OAAA,EAAXZ,MAAW,CAAAa,IAAA;EAAAC,UAAA,EAHV;AAAM;SAGPd,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}