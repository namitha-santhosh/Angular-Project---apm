{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AdminGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticatedUser() && this.authService.isAdmin()) {\n      // User is authenticated and is an admin, allow access\n      return true;\n    } else {\n      // User is not authenticated or is not an admin, redirect to a login page or show an error\n      this.router.navigate(['/login']); // Change this to the appropriate route\n      return false;\n    }\n  }\n}\n_class = AdminGuard;\n_class.ɵfac = function AdminGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AdminGuard };","map":{"version":3,"names":["AdminGuard","constructor","authService","router","canActivate","route","state","isAuthenticatedUser","isAdmin","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\admin.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (this.authService.isAuthenticatedUser() && this.authService.isAdmin()) {\n      // User is authenticated and is an admin, allow access\n      return true;\n    } else {\n      // User is not authenticated or is not an admin, redirect to a login page or show an error\n      this.router.navigate(['/login']); // Change this to the appropriate route\n      return false;\n    }\n  }\n}\n"],"mappings":";;;;AAWA,MAGaA,UAAU;EACrBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,mBAAmB,EAAE,IAAI,IAAI,CAACL,WAAW,CAACM,OAAO,EAAE,EAAE;MACxE;MACA,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClC,OAAO,KAAK;;EAEhB;;SAfWT,UAAU;;mBAAVA,MAAU,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAVf,MAAU;EAAAgB,OAAA,EAAVhB,MAAU,CAAAiB,IAAA;EAAAC,UAAA,EAFT;AAAM;SAEPlB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}