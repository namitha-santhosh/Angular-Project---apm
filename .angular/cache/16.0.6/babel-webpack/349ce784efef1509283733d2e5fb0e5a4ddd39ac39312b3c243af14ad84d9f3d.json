{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nclass AuthService {\n  constructor() {\n    //private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n    //isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    this.isAuthenticated = false;\n    this.authState = {\n      isAuthenticated: false\n    };\n  }\n  // Simulate user login\n  login() {\n    this.authState.isAuthenticated = true;\n    //this.isAuthenticatedSubject.next(true);\n    //console.log(this.authState.isAuthenticated)\n  }\n  // Simulate user logout\n  logout() {\n    this.authState.isAuthenticated = false;\n    //this.isAuthenticatedSubject.next(false);\n  }\n  // Check if the user is authenticated\n  isAuthenticatedUser() {\n    return this.authState.isAuthenticated;\n    //return this.isAuthenticatedSubject.value;\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","isAuthenticated","authState","login","logout","isAuthenticatedUser","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n\r\nexport class AuthService {\r\n  //private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  //isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  private isAuthenticated = false;\r\n  authState = { isAuthenticated: false };\r\n\r\n  // Simulate user login\r\n  login() {\r\n    this.authState.isAuthenticated = true;\r\n    //this.isAuthenticatedSubject.next(true);\r\n    //console.log(this.authState.isAuthenticated)\r\n  }\r\n\r\n  // Simulate user logout\r\n  logout() {\r\n    this.authState.isAuthenticated = false;\r\n    //this.isAuthenticatedSubject.next(false);\r\n  }\r\n  \r\n  // Check if the user is authenticated\r\n  isAuthenticatedUser(): boolean {\r\n    return this.authState.isAuthenticated;\r\n    //return this.isAuthenticatedSubject.value;\r\n  }\r\n}\r\n"],"mappings":";;AAGA,MAIaA,WAAW;EAJxBC,YAAA;IAKE;IACA;IAEQ,KAAAC,eAAe,GAAG,KAAK;IAC/B,KAAAC,SAAS,GAAG;MAAED,eAAe,EAAE;IAAK,CAAE;;EAEtC;EACAE,KAAKA,CAAA;IACH,IAAI,CAACD,SAAS,CAACD,eAAe,GAAG,IAAI;IACrC;IACA;EACF;EAEA;EACAG,MAAMA,CAAA;IACJ,IAAI,CAACF,SAAS,CAACD,eAAe,GAAG,KAAK;IACtC;EACF;EAEA;EACAI,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACH,SAAS,CAACD,eAAe;IACrC;EACF;;SAxBWF,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAO,OAAA,EAAXP,MAAW,CAAAQ,IAAA;EAAAC,UAAA,EAHV;AAAM;SAGPT,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}