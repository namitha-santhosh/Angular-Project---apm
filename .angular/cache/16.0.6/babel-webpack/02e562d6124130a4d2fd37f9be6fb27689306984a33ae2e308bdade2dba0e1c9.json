{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChildren, ElementRef } from '@angular/core';\nimport { FormControl, Validators, FormControlName } from '@angular/forms';\nimport { fromEvent, merge } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nlet ProductEditComponent = class ProductEditComponent {\n  get tags() {\n    return this.productForm.get('tags');\n  }\n  constructor(fb, route, router, productService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.productService = productService;\n    this.pageTitle = 'Product Edit';\n    this.errorMessage = '';\n    this.selectedImageFile = null;\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      productCode: {\n        required: 'Product code is required.'\n      },\n      starRating: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.productForm = this.fb.group({\n      productName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      productCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      releaseDate: [''],\n      price: [''],\n      imageFile: [],\n      //imageUrl: [''],\n      tags: this.fb.array([]),\n      description: ''\n    });\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = Number(this.route.snapshot.paramMap.get('id'));\n      this.getProduct(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n  addTag() {\n    this.tags.push(new FormControl());\n  }\n  deleteTag(index) {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n  getProduct(id) {\n    console.log(id);\n    this.productService.getProduct(id).subscribe({\n      next: product => this.displayProduct(product),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayProduct(product) {\n    if (this.productForm) {\n      this.productForm.reset();\n    }\n    this.product = product;\n    if (this.product.id === 0) {\n      this.pageTitle = 'Add Product';\n    } else {\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\n    }\n    // Update the data on the form\n    this.productForm.patchValue({\n      productName: this.product.productName,\n      productCode: this.product.productCode,\n      starRating: this.product.starRating,\n      releaseDate: this.product.releaseDate,\n      price: this.product.price,\n      imageUrl: this.product.imageUrl,\n      description: this.product.description\n    });\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\n  }\n  deleteProduct() {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else if (this.product.id) {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  /* saveProduct(): void {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        const p = { ...this.product, ...this.productForm.value };\n           if (p.id === 0) {\n          this.productService.createProduct(p)\n            .subscribe({\n              next: x => {\n                console.log(x);\n                return this.onSaveComplete();\n              },\n              error: err => this.errorMessage = err\n            });\n        } else {\n          this.productService.updateProduct(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  } */\n  onImageChange(event) {\n    const file = event.target.files[0];\n    this.selectedImageFile = file;\n  }\n  saveProduct() {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        const productData = {\n          ...this.product,\n          ...this.productForm.value\n        };\n        console.log('Selected Image File:', this.selectedImageFile);\n        const formData = new FormData();\n        formData.append('productName', productData.productName);\n        formData.append('productCode', productData.productCode);\n        formData.append('starRating', productData.starRating.toString());\n        formData.append('description', productData.description);\n        formData.append('price', productData.price.toString());\n        formData.append('releaseDate', productData.releaseDate);\n        // Append the selected image file to the FormData\n        if (this.selectedImageFile) {\n          formData.append('image', this.selectedImageFile, this.selectedImageFile.name);\n        }\n        if (productData.id === 0) {\n          this.productService.createProductWithImage(formData).subscribe({\n            next: x => {\n              console.log(productData);\n              return this.onSaveComplete();\n            },\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.productService.updateProduct(productData).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n          /* this.productService.updateProductWithImage(productData.id, formData, productData)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            }); */\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n};\n__decorate([ViewChildren(FormControlName, {\n  read: ElementRef\n})], ProductEditComponent.prototype, \"formInputElements\", void 0);\nProductEditComponent = __decorate([Component({\n  templateUrl: './product-edit.component.html'\n})], ProductEditComponent);\nexport { ProductEditComponent };","map":{"version":3,"names":["Component","ViewChildren","ElementRef","FormControl","Validators","FormControlName","fromEvent","merge","debounceTime","NumberValidators","GenericValidator","ProductEditComponent","tags","productForm","get","constructor","fb","route","router","productService","pageTitle","errorMessage","selectedImageFile","displayMessage","validationMessages","productName","required","minlength","maxlength","productCode","starRating","range","genericValidator","ngOnInit","group","minLength","maxLength","releaseDate","price","imageFile","array","description","sub","paramMap","subscribe","params","id","Number","snapshot","getProduct","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","nativeElement","valueChanges","pipe","value","processMessages","addTag","push","deleteTag","index","removeAt","markAsDirty","console","log","next","product","displayProduct","error","err","reset","patchValue","imageUrl","setControl","deleteProduct","onSaveComplete","confirm","onImageChange","event","file","target","files","saveProduct","valid","dirty","productData","formData","FormData","append","toString","name","createProductWithImage","x","updateProduct","navigate","__decorate","read","templateUrl"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\products\\product-edit.component.ts"],"sourcesContent":["import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Observable, Subscription, fromEvent, merge } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { Product } from './product';\r\nimport { ProductService } from './product.service';\r\n\r\nimport { NumberValidators } from '../shared/number.validator';\r\nimport { GenericValidator } from '../shared/generic-validator';\r\n\r\n@Component({\r\n  templateUrl: './product-edit.component.html'\r\n})\r\nexport class ProductEditComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChildren(FormControlName, { read: ElementRef }) formInputElements!: ElementRef[];\r\n\r\n  pageTitle = 'Product Edit';\r\n  errorMessage = '';\r\n  productForm!: FormGroup;\r\n\r\n  product!: Product;\r\n  private sub!: Subscription;\r\n\r\n  selectedImageFile: File | null = null;\r\n\r\n  // Use with the generic validation message class\r\n  displayMessage: { [key: string]: string } = {};\r\n  private validationMessages: { [key: string]: { [key: string]: string } };\r\n  private genericValidator: GenericValidator;\r\n\r\n  get tags(): FormArray {\r\n    return this.productForm.get('tags') as FormArray;\r\n  }\r\n\r\n  constructor(private fb: FormBuilder,\r\n              private route: ActivatedRoute,\r\n              private router: Router,\r\n              private productService: ProductService,\r\n              ) {\r\n\r\n    // Defines all of the validation messages for the form.\r\n    // These could instead be retrieved from a file or database.\r\n    this.validationMessages = {\r\n      productName: {\r\n        required: 'Product name is required.',\r\n        minlength: 'Product name must be at least three characters.',\r\n        maxlength: 'Product name cannot exceed 50 characters.'\r\n      },\r\n      productCode: {\r\n        required: 'Product code is required.'\r\n      },\r\n      starRating: {\r\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\r\n      }\r\n    };\r\n\r\n    // Define an instance of the validator for use with this form,\r\n    // passing in this form's set of validation messages.\r\n    this.genericValidator = new GenericValidator(this.validationMessages);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.productForm = this.fb.group({\r\n      productName: ['', [Validators.required,\r\n                         Validators.minLength(3),\r\n                         Validators.maxLength(50)]],\r\n      productCode: ['', Validators.required],\r\n      starRating: ['', NumberValidators.range(1, 5)],\r\n      releaseDate: [''],\r\n      price: [''],\r\n      imageFile: [],\r\n      //imageUrl: [''],\r\n      tags: this.fb.array([]),\r\n      description: ''\r\n    });\r\n\r\n    // Read the product Id from the route parameter\r\n    this.sub = this.route.paramMap.subscribe(\r\n      params => {\r\n        const id = Number(this.route.snapshot.paramMap.get('id'));\r\n        this.getProduct(id);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Watch for the blur event from any input element on the form.\r\n    // This is required because the valueChanges does not provide notification on blur\r\n    const controlBlurs: Observable<any>[] = this.formInputElements\r\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\r\n\r\n    // Merge the blur event observable with the valueChanges observable\r\n    // so we only need to subscribe once.\r\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(\r\n      debounceTime(800)\r\n    ).subscribe(value => {\r\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\r\n    });\r\n  }\r\n\r\n  addTag(): void {\r\n    this.tags.push(new FormControl());\r\n  }\r\n\r\n  deleteTag(index: number): void {\r\n    this.tags.removeAt(index);\r\n    this.tags.markAsDirty();\r\n  }\r\n\r\n  getProduct(id: number): void {\r\n    console.log(id)\r\n    this.productService.getProduct(id)\r\n      .subscribe({\r\n        next: (product: Product) => this.displayProduct(product),\r\n        error: err => this.errorMessage = err\r\n      });\r\n  }\r\n\r\n  displayProduct(product: Product): void {\r\n    if (this.productForm) {\r\n      this.productForm.reset();\r\n    }\r\n    this.product = product;\r\n\r\n    if (this.product.id === 0) {\r\n      this.pageTitle = 'Add Product';\r\n    } else {\r\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\r\n    }\r\n\r\n    // Update the data on the form\r\n    this.productForm.patchValue({\r\n      productName: this.product.productName,\r\n      productCode: this.product.productCode,\r\n      starRating: this.product.starRating,\r\n      releaseDate: this.product.releaseDate,\r\n      price: this.product.price,\r\n      imageUrl: this.product.imageUrl,\r\n      description: this.product.description\r\n    });\r\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\r\n  }\r\n\r\n  deleteProduct(): void {\r\n    if (this.product.id === 0) {\r\n      // Don't delete, it was never saved.\r\n      this.onSaveComplete();\r\n    } else if (this.product.id) {\r\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\r\n        this.productService.deleteProduct(this.product.id)\r\n          .subscribe({\r\n            next: () => this.onSaveComplete(),\r\n            error: err => this.errorMessage = err\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  /* saveProduct(): void {\r\n    if (this.productForm.valid) {\r\n      if (this.productForm.dirty) {\r\n        const p = { ...this.product, ...this.productForm.value };\r\n\r\n        if (p.id === 0) {\r\n          this.productService.createProduct(p)\r\n            .subscribe({\r\n              next: x => {\r\n                console.log(x);\r\n                return this.onSaveComplete();\r\n              },\r\n              error: err => this.errorMessage = err\r\n            });\r\n        } else {\r\n          this.productService.updateProduct(p)\r\n            .subscribe({\r\n              next: () => this.onSaveComplete(),\r\n              error: err => this.errorMessage = err\r\n            });\r\n        }\r\n      } else {\r\n        this.onSaveComplete();\r\n      }\r\n    } else {\r\n      this.errorMessage = 'Please correct the validation errors.';\r\n    }\r\n  } */\r\n  \r\n  onImageChange(event: any): void {\r\n  const file = event.target.files[0];\r\n  this.selectedImageFile = file;\r\n}\r\n\r\n  saveProduct(): void {\r\n    if (this.productForm.valid) {\r\n      if (this.productForm.dirty) {\r\n        const productData = { ...this.product, ...this.productForm.value };\r\n        console.log('Selected Image File:', this.selectedImageFile);\r\n        const formData = new FormData();\r\n        formData.append('productName', productData.productName);\r\n        formData.append('productCode', productData.productCode);\r\n        formData.append('starRating', productData.starRating.toString());\r\n        formData.append('description', productData.description);\r\n        formData.append('price', productData.price.toString());\r\n        formData.append('releaseDate', productData.releaseDate);\r\n  \r\n        // Append the selected image file to the FormData\r\n        if (this.selectedImageFile) {\r\n          formData.append('image', this.selectedImageFile, this.selectedImageFile.name);\r\n        }\r\n  \r\n        if (productData.id === 0) {\r\n          this.productService.createProductWithImage(formData)\r\n            .subscribe({\r\n              next: x => {\r\n                console.log(productData);\r\n                return this.onSaveComplete();\r\n              },\r\n              error: err => this.errorMessage = err\r\n            });\r\n        } else {\r\n          this.productService.updateProduct(productData)\r\n          .subscribe({\r\n            next: () => this.onSaveComplete(),\r\n            error: err => this.errorMessage = err\r\n          });\r\n          /* this.productService.updateProductWithImage(productData.id, formData, productData)\r\n            .subscribe({\r\n              next: () => this.onSaveComplete(),\r\n              error: err => this.errorMessage = err\r\n            }); */\r\n        }\r\n      } else {\r\n        this.onSaveComplete();\r\n      }\r\n    } else {\r\n      this.errorMessage = 'Please correct the validation errors.';\r\n    }\r\n  }\r\n  \r\n\r\n  onSaveComplete(): void {\r\n    // Reset the form to clear the flags\r\n    this.productForm.reset();\r\n    this.router.navigate(['/products']);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}