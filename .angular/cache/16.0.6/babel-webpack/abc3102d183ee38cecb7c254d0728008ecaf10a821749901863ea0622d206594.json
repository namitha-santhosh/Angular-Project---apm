{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth.service\";\nclass ProductService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.productsUrl = 'http://127.0.0.1:8000/api/products'; // JSON Server endpoint\n    this.editUrl = 'http://127.0.0.1:8000/products/api/imgedit';\n  }\n  getProducts() {\n    // Retrieve the JWT token from the AuthService\n    const token = this.authService.getToken();\n    // Add the JWT token to the request headers\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(this.productsUrl, {\n      headers\n    }).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  getProduct(id) {\n    const token = this.authService.getToken();\n    if (id === 0) {\n      return of(this.initializeProduct());\n    }\n    const url = `${this.productsUrl}/${id}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(url, {\n      headers\n    }).pipe(tap(data => console.log('getProduct: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  createProductWithImage(formData) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    // Create headers with the content type for multipart/form-data\n    return this.http.post(this.productsUrl, formData, {\n      headers\n    }).pipe(tap(data => {\n      console.log('createProductWithImage Response:', data);\n    }), catchError(this.handleError));\n  }\n  deleteProduct(id) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleteProduct: ' + id)), catchError(this.handleError));\n  }\n  updateProduct(product) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put(url, product, {\n      headers\n    }).pipe(tap(() => console.log('updateProduct: ' + product.id)),\n    // Return the product on an update\n    map(() => product), catchError(this.handleError));\n  }\n  updateProductWithImage(productId, productData) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const url = `${this.editUrl}/${productId}`;\n    return this.http.put(url, productData, {\n      headers\n    }).pipe(tap(() => console.log('updateProduct: ' + productId)),\n    // Return the product on an update\n    map(() => productData),\n    // Cast FormData to Product for simplicity\n    catchError(this.handleError));\n  }\n  handleError(err) {\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n  initializeProduct() {\n    // Return an initialized object\n    return {\n      id: 0,\n      productName: '',\n      productCode: '',\n      tags: [''],\n      releaseDate: '',\n      price: 0,\n      description: '',\n      starRating: 0,\n      imageUrl: ''\n    };\n  }\n}\n_class = ProductService;\n_class.ɵfac = function ProductService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { ProductService };","map":{"version":3,"names":["HttpHeaders","of","throwError","catchError","tap","map","ProductService","constructor","http","authService","productsUrl","editUrl","getProducts","token","getToken","headers","set","get","pipe","data","console","log","JSON","stringify","handleError","getProduct","id","initializeProduct","url","createProductWithImage","formData","post","deleteProduct","delete","updateProduct","product","put","updateProductWithImage","productId","productData","err","errorMessage","error","ErrorEvent","message","status","productName","productCode","tags","releaseDate","price","description","starRating","imageUrl","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\products\\product.service.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { Product } from './product';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private productsUrl = 'http://127.0.0.1:8000/api/products'; // JSON Server endpoint\r\n  private editUrl = 'http://127.0.0.1:8000/products/api/imgedit'\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n  getProducts(): Observable<Product[]> {\r\n\r\n    // Retrieve the JWT token from the AuthService\r\n    const token = this.authService.getToken();\r\n\r\n    // Add the JWT token to the request headers\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<Product[]>(this.productsUrl, { headers })\r\n      .pipe(\r\n        tap(data => console.log(JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getProduct(id: number): Observable<Product> {\r\n    const token = this.authService.getToken();\r\n    if (id === 0) {\r\n      return of(this.initializeProduct());\r\n    }\r\n    const url = `${this.productsUrl}/${id}`;\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<Product>(url, { headers })\r\n      .pipe(\r\n        tap(data => console.log('getProduct: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createProductWithImage(formData: FormData): Observable<Product> {\r\n    const token = this.authService.getToken();\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    // Create headers with the content type for multipart/form-data\r\n  \r\n    return this.http.post<Product>(this.productsUrl, formData, { headers }).pipe(\r\n      tap((data: any) => {\r\n        console.log('createProductWithImage Response:', data);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  \r\n  \r\n\r\n  deleteProduct(id: number): Observable<{}> {\r\n    const token = this.authService.getToken();\r\n\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` });\r\n    const url = `${this.productsUrl}/${id}`;\r\n    return this.http.delete<Product>(url, { headers })\r\n      .pipe(\r\n        tap(data => console.log('deleteProduct: ' + id)),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateProduct(product: Product): Observable<Product> {\r\n    const token = this.authService.getToken();\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`});\r\n    const url = `${this.productsUrl}/${product.id}`;\r\n    return this.http.put<Product>(url, product, { headers })\r\n      .pipe(\r\n        tap(() => console.log('updateProduct: ' + product.id)),\r\n        // Return the product on an update\r\n        map(() => product),\r\n        catchError(this.handleError)\r\n      );\r\n  } \r\n\r\n  updateProductWithImage(productId: number, productData: FormData): Observable<Product> {\r\n    const token = this.authService.getToken();\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`});\r\n\r\n    const url = `${this.editUrl}/${productId}`;\r\n    return this.http.put<Product>(url, productData, { headers })\r\n      .pipe(\r\n        tap(() => console.log('updateProduct: ' + productId)),\r\n        // Return the product on an update\r\n        map(() => productData as unknown as Product), // Cast FormData to Product for simplicity\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(err: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = '';\r\n    if (err.error instanceof ErrorEvent) {\r\n      errorMessage = `An error occurred: ${err.error.message}`;\r\n    } else {\r\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(() => errorMessage);\r\n  }\r\n\r\n   private initializeProduct(): Product {\r\n    // Return an initialized object\r\n    return {\r\n      id: 0,\r\n      productName: '',\r\n      productCode: '',\r\n      tags: [''],\r\n      releaseDate: '',\r\n      price: 0,\r\n      description: '',\r\n      starRating: 0,\r\n      imageUrl: ''\r\n    };\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}