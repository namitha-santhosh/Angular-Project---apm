{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productsUrl = 'http://127.0.0.1:8000/api/products'; // JSON Server endpoint\n  }\n\n  getProducts() {\n    return this.http.get(this.productsUrl).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  getProduct(id) {\n    if (id === 0) {\n      return of(this.initializeProduct());\n    }\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(data => console.log('getProduct: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  /*\n    createProduct(product: Product): Observable<Product> {\n      const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n      product.id = null;\n      return this.http.post<Product>(this.productsUrl, product, { headers })\n        .pipe(\n          tap(data => console.log('createProduct: ' + JSON.stringify(data))),\n          catchError(this.handleError)\n        );\n    } */\n  createProductWithImage(formData) {\n    // Create headers with the content type for multipart/form-data\n    const headers = new HttpHeaders({\n      // No need to set 'Content-Type' here; it will be set automatically for FormData\n      // Other headers, if needed, can be added here\n    });\n    return this.http.post(this.productsUrl, formData, {\n      headers\n    }).pipe(tap(data => {\n      console.log('createProductWithImage Response:', data);\n    }), catchError(this.handleError));\n  }\n  deleteProduct(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleteProduct: ' + id)), catchError(this.handleError));\n  }\n  updateProduct(product) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put(url, product, {\n      headers\n    }).pipe(tap(() => console.log('updateProduct: ' + product.id)),\n    // Return the product on an update\n    map(() => product), catchError(this.handleError));\n  }\n  updateProductWithImage(productId, productData) {\n    producturl;\n    const url = `${this.productsUrl}/${productId}`;\n    return this.http.put(url, productData).pipe(tap(() => console.log('updateProduct: ' + productId)),\n    // Return the product on an update\n    map(() => productData),\n    // Cast FormData to Product for simplicity\n    catchError(this.handleError));\n  }\n  handleError(err) {\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n  initializeProduct() {\n    // Return an initialized object\n    return {\n      id: 0,\n      productName: '',\n      productCode: '',\n      tags: [''],\n      releaseDate: '',\n      price: 0,\n      description: '',\n      starRating: 0,\n      imageUrl: ''\n    };\n  }\n}\n_class = ProductService;\n_class.ɵfac = function ProductService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { ProductService };","map":{"version":3,"names":["HttpHeaders","of","throwError","catchError","tap","map","ProductService","constructor","http","productsUrl","getProducts","get","pipe","data","console","log","JSON","stringify","handleError","getProduct","id","initializeProduct","url","createProductWithImage","formData","headers","post","deleteProduct","delete","updateProduct","product","put","updateProductWithImage","productId","productData","producturl","err","errorMessage","error","ErrorEvent","message","status","productName","productCode","tags","releaseDate","price","description","starRating","imageUrl","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hp\\OneDrive\\Desktop\\P10 - Training\\angular\\Angular Project - apm\\src\\app\\products\\product.service.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { Product } from './product';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private productsUrl = 'http://127.0.0.1:8000/api/products'; // JSON Server endpoint\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProducts(): Observable<Product[]> {\r\n    return this.http.get<Product[]>(this.productsUrl)\r\n      .pipe(\r\n        tap(data => console.log(JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getProduct(id: number): Observable<Product> {\r\n    if (id === 0) {\r\n      return of(this.initializeProduct());\r\n    }\r\n    const url = `${this.productsUrl}/${id}`;\r\n    return this.http.get<Product>(url)\r\n      .pipe(\r\n        tap(data => console.log('getProduct: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n/* \r\n  createProduct(product: Product): Observable<Product> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    product.id = null;\r\n    return this.http.post<Product>(this.productsUrl, product, { headers })\r\n      .pipe(\r\n        tap(data => console.log('createProduct: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  } */\r\n\r\n  createProductWithImage(formData: FormData): Observable<Product> {\r\n    // Create headers with the content type for multipart/form-data\r\n    const headers = new HttpHeaders({\r\n      // No need to set 'Content-Type' here; it will be set automatically for FormData\r\n      // Other headers, if needed, can be added here\r\n    });\r\n  \r\n    return this.http.post<Product>(this.productsUrl, formData, { headers }).pipe(\r\n      tap((data: any) => {\r\n        console.log('createProductWithImage Response:', data);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  \r\n  \r\n\r\n  deleteProduct(id: number): Observable<{}> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    const url = `${this.productsUrl}/${id}`;\r\n    return this.http.delete<Product>(url, { headers })\r\n      .pipe(\r\n        tap(data => console.log('deleteProduct: ' + id)),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateProduct(product: Product): Observable<Product> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    const url = `${this.productsUrl}/${product.id}`;\r\n    return this.http.put<Product>(url, product, { headers })\r\n      .pipe(\r\n        tap(() => console.log('updateProduct: ' + product.id)),\r\n        // Return the product on an update\r\n        map(() => product),\r\n        catchError(this.handleError)\r\n      );\r\n  } \r\n\r\n  updateProductWithImage(productId: number, productData: FormData): Observable<Product> {\r\n    producturl\r\n    const url = `${this.productsUrl}/${productId}`;\r\n    return this.http.put<Product>(url, productData)\r\n      .pipe(\r\n        tap(() => console.log('updateProduct: ' + productId)),\r\n        // Return the product on an update\r\n        map(() => productData as unknown as Product), // Cast FormData to Product for simplicity\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(err: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = '';\r\n    if (err.error instanceof ErrorEvent) {\r\n      errorMessage = `An error occurred: ${err.error.message}`;\r\n    } else {\r\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(() => errorMessage);\r\n  }\r\n\r\n   private initializeProduct(): Product {\r\n    // Return an initialized object\r\n    return {\r\n      id: 0,\r\n      productName: '',\r\n      productCode: '',\r\n      tags: [''],\r\n      releaseDate: '',\r\n      price: 0,\r\n      description: '',\r\n      starRating: 0,\r\n      imageUrl: ''\r\n    };\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}